{"version":3,"sources":["webpack://vue-yandex-share/src/components/vue-yandex-share/src/components/vue-yandex-share/vue-yandex-share.vue"],"names":[],"mappings":"AA8TA,mCACA,+BAAA,CAAA,uBACA,CAEA,yCACA,SACA","file":"vue-yandex-share.css","sourcesContent":["<script lang=\"ts\">\n  import { Component, Prop, Vue, Watch } from 'vue-property-decorator';\n\n  @Component<VueYandexShare>({})\n  export default class VueYandexShare extends Vue {\n    /**\n     * Адрес скрипта\n     */\n    src: string = '//yastatic.net/share2/share.js';\n\n    /**\n     * Инстанс виджета\n     */\n    widget: { [key: string]: any } | undefined = undefined;\n\n    /**\n     * Токен для снятия ограничения запросов на получение счетчика. Актуален и\n     * работает только для Facebook\n     */\n    @Prop({ type: String })\n    private accessToken!: string;\n\n    /**\n     * Признак того, что загрузка стилей отключена. Если добавить атрибут,\n     * соцсети будут отображаться в виде текстового вертикального списка\n     */\n    @Prop({\n      type: Boolean,\n      default: false,\n    })\n    private bare!: boolean;\n\n    /**\n     * Признак того, что на кнопке соцсети отображается счетчик публикаций\n     */\n    @Prop({\n      type: Boolean,\n      default: false,\n    })\n    private counter!: boolean;\n\n    /**\n     * Позиция кнопки Скопировать ссылку. Кнопка Скопировать ссылку может\n     * отображаться, если используется параметр limit\n     */\n    @Prop({\n      type: String,\n      default: 'last',\n      validator(value) {\n        return ['first', 'last', 'hidden'].includes(value);\n      },\n    })\n    private copy!: 'first' | 'last' | 'hidden';\n\n    /**\n     * Текст, которым нужно поделиться\n     */\n    @Prop({\n      type: String,\n    })\n    private description!: string;\n\n    /**\n     * Направление списка кнопок\n     */\n    @Prop({\n      type: String,\n      default: 'horizontal',\n      validator(value) {\n        return ['horizontal', 'vertical'].includes(value);\n      },\n    })\n    private direction!: 'horizontal' | 'vertical';\n\n    /**\n     * Хэштеги. Актуальны и работают только для Твиттера\n     */\n    @Prop({\n      type: String,\n    })\n    private hashtags!: string;\n\n    /**\n     * Изображение, которым нужно поделиться\n     */\n    @Prop({\n      type: String,\n    })\n    private image!: string;\n\n    /**\n     * Язык блока. Локализуются подписи кнопок соцсетей и кнопка Скопировать\n     * ссылку\n     */\n    @Prop({\n      type: String,\n      default: 'ru',\n      validator(value) {\n        return ['az', 'be', 'en', 'hy', 'ka', 'kk', 'ro', 'ru', 'tr', 'tt', 'uk'].includes(value);\n      },\n    })\n    private lang!: 'az' | 'be' | 'en' | 'hy' | 'ka' | 'kk' | 'ro' | 'ru' | 'tr' | 'tt' | 'uk';\n\n    /**\n     * Количество соцсетей, отображаемых в виде кнопок. Используется если нужно\n     * встроить в блок много соцсетей, а также чтобы блок занимал мало места на\n     * странице. Не вошедшие в лимит соцсети будут отображаться в pop-up по\n     * нажатию кнопки\n     */\n    @Prop({\n      type: Number,\n    })\n    private limit!: number;\n\n    /**\n     * Направление открытия pop-up\n     */\n    @Prop({\n      type: String,\n      default: 'bottom',\n      validator(value) {\n        return ['bottom', 'top'].includes(value);\n      },\n    })\n    private popupDirection!: 'bottom' | 'top';\n\n    /**\n     * Расположение pop-up относительно контейнера блока. Значение outer может\n     * понадобиться в том случае, если из-за специфики верстки вашего сайта\n     * pop-up обрезается соседними элементами страницы\n     */\n    @Prop({\n      type: String,\n      default: 'inner',\n      validator(value) {\n        return ['inner', 'outer'].includes(value);\n      },\n    })\n    private popupPosition!: 'inner' | 'outer';\n\n    /**\n     * Размер кнопок соцсетей\n     */\n    @Prop({\n      type: String,\n      default: 'm',\n      validator(value) {\n        return ['m', 's'].includes(value);\n      },\n    })\n    private size!: 'm' | 's';\n\n    /**\n     * Заголовок, которым нужно поделиться\n     */\n    @Prop({\n      type: String,\n    })\n    private title!: string;\n\n    /**\n     * Ссылка, которой нужно поделиться\n     */\n    @Prop({\n      type: String,\n    })\n    private url!: string;\n\n    /**\n     * Список поддерживаемых соцсетей\n     */\n    @Prop({\n      type: Array,\n      default() {\n        return [\n          'blogger',\n          'delicious',\n          'digg',\n          'evernote',\n          'facebook',\n          'gplus',\n          'linkedin',\n          'lj',\n          'moimir',\n          'odnoklassniki',\n          'pinterest',\n          'pocket',\n          'qzone',\n          'reddit',\n          'renren',\n          'sinaWeibo',\n          'skype',\n          'surfingbird',\n          'telegram',\n          'tencentWeibo',\n          'tumblr',\n          'twitter',\n          'viber',\n          'vkontakte',\n          'whatsapp',\n        ];\n      },\n    })\n    private services!: string[];\n\n    /**\n     * Параметры контента для каждой соцсети отдельно\n     */\n    @Prop({\n      type: Object,\n      default() {\n        return {};\n      },\n    })\n    private contentByService!: { [key: string]: any };\n\n    /**\n     * При изменении входных параметров переподключает виджет\n     */\n    @Watch('$props', { deep: true })\n    onPropChanged() {\n      this.loadAPIScript(this.$el);\n    }\n\n    /**\n     * Инициализация виджета\n     *\n     * @param element\n     */\n    initialize(element: Element | string) {\n      this.widget = (window as any).Ya?.share2?.(element, {\n        content: {\n          url: this.url || window.location.href,\n          title: this.title || document.title,\n          description: this.description,\n          image: this.image,\n        },\n        contentByService: this.contentByService,\n        theme: {\n          bare: this.bare,\n          copy: this.copy,\n          counter: this.counter,\n          direction: this.direction,\n          lang: this.lang,\n          limit: this.limit,\n          popupDirection: this.popupDirection,\n          popupPosition: this.popupPosition,\n          services: this.services.join(','),\n          size: this.size,\n        },\n        hooks: {\n          onready: () => {\n            this.$emit('ready');\n          },\n          onshare: (name: string) => {\n            this.$emit('share', name);\n          },\n        },\n      });\n    }\n\n    /**\n     * Ижидание загрузки скрипта\n     *\n     * @param element\n     */\n    pollingScriptLoad(element: Element | string) {\n      const pollInterval = setInterval(() => {\n        if ((window as any).Ya) {\n          this.initialize(element);\n          clearInterval(pollInterval);\n        }\n      }, 300);\n      setTimeout(() => {\n        clearInterval(pollInterval);\n      }, 10000);\n    }\n\n    /**\n     * Подключение скрипта YandexShare\n     *\n     * @param element\n     */\n    loadAPIScript(element: Element | string) {\n      // eslint-disable-next-line no-unused-expressions\n      this.widget?.destroy?.();\n\n      if (!document.querySelectorAll(`[src*='${this.src}']`).length) {\n        const script: HTMLScriptElement = document.createElement('script');\n        script.setAttribute('src', this.src);\n        script.setAttribute('async', 'true');\n        script.setAttribute('defer', 'true');\n\n        document.body.appendChild(script);\n\n        script.onload = () => {\n          this.$emit('load');\n          this.initialize(element);\n        };\n        script.onerror = error => {\n          this.$emit('error', error);\n        };\n      } else {\n        this.pollingScriptLoad(element);\n      }\n    }\n\n    mounted() {\n      this.loadAPIScript(this.$el);\n    }\n  }\n</script>\n\n<template>\n  <div class=\"vue-yandex-share\"></div>\n</template>\n\n<style lang=\"postcss\" scoped>\n  .vue-yandex-share {\n    transition-duration: 0.3s;\n  }\n\n  .vue-yandex-share:empty {\n    opacity: 0;\n  }\n</style>\n"]}